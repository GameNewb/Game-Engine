#define SDL_MAIN_HANDLED
#define main SDL_main
#include <SDL.h>
#include <SDL_mixer.h>
#include <SDL_ttf.h>
#include <SDL_image.h>
#include <GL/glew.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <string>
#include <vector>
#include <math.h>
#include <assert.h>
#include <time.h>
#include "DrawUtils.h"
#include "CharDetails.h"
#include "EnemyDetails.h"
#include "Tile.h"
#include "Object.h"

#ifndef M_PI
  #define M_PI 3.14159265358979323846
#endif
 
#define RAD2DEG 180.0/M_PI
#define DEG2RAD M_PI/180.0
#define PROJECTILE_PATH "Sounds\player_proj.wav"

// Camera class
class Camera
{
public:
	int x;
	int y;
	int w;
	int h;
} cam;

typedef struct 
{
	bool isActive;
	double x, y, dx, dy;
	int damage;
} Projectile;

// Define object data
AnimationDef animDef;
AnimationData animation;
CharacterData player;

const int enemyCount = 41;
EnemyAnimationDef enAnimDef;
EnemyAnimationData enAnimation;
EnemyAnimationData enAnimation2;
EnemyAnimationData enAnimation0;
EnemyAnimationData bossAnimation;
EnemyData *enemy = new EnemyData();
EnemyData *enemies = new EnemyData[enemyCount];

const int enemyTotalProjectile = 100;
Projectile playerProj[100];
Projectile enemyProj[enemyCount][enemyTotalProjectile];


const int TILE_COLUMNS = 64;
const int TILE_ROWS = 128;
Tile bgTiles[TILE_COLUMNS][TILE_ROWS];
int tileMap[TILE_COLUMNS][TILE_ROWS] = 
{ 
//      1	 2	  3    4    5    6    7    8    9   10   11    12    13    14    15    16    17    18    19    20    21    22    23    24    25    26    27    28    29    30    31    32    33    34    35    36    37    38    39    40    41    42    43    44    45    46    47    48    49    50    51    52    53    54    55    56    57    58    59    60    61    62    63    64	 65	   66    67    68    69    70    71    72    73    74    75    76    77    78    79    80    81    82    83    84    85    86    87    88    89    90    91    92    93    94    95    96    97    98    99   100	101   102   103   104   105   106   107   108   109   110   111	  112   113   114   115   116   117   118   119   120   121   122   123   124   125   126   127	  128            
	{   9,  -1,	  3,   5,   1,   3,	  5,   1,   3,   5,   1,    3,    5,    1,    3,    5,    1,    3,    5,    1,    3,    5,    1,    3,    5,    1,    3,    5,    1,    3,    5,    1,    3,    5,    1,    3,    5,    1,    3,    5,    1,    3,    5,    1,    3,    5,    1,    3,    5,    1,    3,    5,    1,    3,    5,    1,    3,    5,    1,    3,    5,    1,    3,    5,   59,   62,   62,   62,   62,   65,   76,   37,   31,   33,   29,   31,   33,   29,   31,   33,   29,   31,   33,   29,   31,   33,   29,   31,   33,   29,   31,   33,   29,   31,   33,   29,   31,   33,   29,   31,   33,   29,   31,   33,   29,   31,   33,   29,   31,   33,   29,   31,   33,   29,   31,   33,   29,   31,   33,   29,   31,   33,   29,   31,   33,   39,  -17,   73},
	{  10,  -2,   4,   6,   2,   4,   6,   2,   4,   6,   2,    4,    6,    2,    4,    6,    2,    4,    6,    2,    4,    6,    2,    4,    6,    2,    4,    6,    2,    4,    6,    2,    4,    6,    2,    4,    6,    2,    4,    6,    2,    4,    6,    2,    4,    6,    2,    4,    6,    2,    4,    6,    2,    4,    6,    2,    4,    6,    2,    4,    6,    2,    4,    6,   60,   63,   63,   63,   63,   66,   77,   38,   32,   34,   30,   32,   34,   30,   32,   34,   30,   32,   34,   30,   32,   34,   30,   32,   34,   30,   32,   34,   30,   32,   34,   30,   32,   34,   30,   32,   34,   30,   32,   34,   30,   32,   34,   30,   32,   34,   30,   32,   34,   30,   32,   34,   30,   32,   34,   30,   32,   34,   30,   32,   34,   40,  -17,   74},
	{	9,  11,   0,   0,   0,   0,   0,   0,   0,   0,   0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   59,   71,   63,   63,   63,   63,   66,   77,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,   74},
	{  10,  12,   0,   0,   0,   0,   0,   0,   0,   0,   0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   50,   52,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   60,   63,   63,   63,   63,   63,   66,   77,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,   74},
	{   9,  11,   0,   0,   0,   0,   0,   0,   0,   0,   0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   56,   58,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   60,   63,   63,   63,   63,   63,   66,   77,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,   73,   62,   65,   76,  -15,  -15,   37,   31,   33,   35,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,   74},
	{  10,  12,   0,  59,  62,  65,  68,   0,   0,   0,   0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   -3,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   60,   63,   63,   63,   63,   63,   66,   77,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,   73,   62,   65,   76,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,   74,   63,   66,   77,  -15,  -15,   38,   32,   34,   36,  -15,  -15,  -15,  -15,   73,   65,   76,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,   74},
	{	9,  11,   0,  61,  64,  67,  70,   0,   0,   0,   0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   -6,    0,    0,    0,    0,    0,    0,    0,    0,    0,   60,   63,   63,   63,   63,   63,   66,   77,  -15,  -15,   37,   31,   33,   35,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,   74,   63,   66,   77,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,   75,   64,   67,   78,  -15,  -15,  -15,   37,   31,   33,   35,  -15,  -15,  -15,   74,   66,   77,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,   74},
	{  10,  12,   0,   0,  -9, -10, -11,   0,   0,   0,   0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   59,   62,   62,   62,   62,   62,   65,   68,    0,    0,    0,    0,    0,   -7,    0,    0,    0,  -12,    3,    9,   11,    0,    0,   60,   63,   63,   63,   63,   63,   66,   77,  -15,  -15,   38,   32,   34,   36,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,   75,   64,   67,   78,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -19,  -20,  -21,  -15,  -15,  -15,   38,   32,   34,   36,  -15,  -15,  -15,   75,   67,   78,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,   74},
	{	9,  11,   0,   0,   0,   0,  59,  62,  62,  65,  68,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   60,   63,   63,   63,   63,   63,   66,   69,    0,    0,    0,    0,    0,    0,    0,    0,    0,  -13,    4,   10,   12,    0,    0,   60,   63,   63,   63,   63,   63,   66,   77,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -19,  -20,  -21,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -19,  -21,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,   74},
	{  10,  12,   0,   0,   0,   0,  61,  64,  67,  67,  70,    0,  -12,    3,    9,   11,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   60,   63,   63,   63,   63,   63,   66,   69,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   60,   63,   63,   63,   63,   63,   66,   77,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,   37,   31,   33,   35,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,   74},
	{	9,  11,   0,   0,   0,   0,   0,  -9, -10, -10, -11,    0,  -13,    4,   10,   12,    0,   50,   52,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   60,   63,   63,   63,   63,   63,   66,   69,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   60,   63,   63,   63,   63,   63,   66,   77,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,   38,   32,   34,   36,  -15,  -15,  -15,  -16,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,   74},
	{  10,  12,   0,   0,   0,   0,   0,   0,   0,   0,   0,    0,    0,    0,    0,   23,   26,   53,   55,    0,    0,    0,    0,    0,    0,    0,    0,  -12,    3,    9,   11,    0,    0,  -12,    3,    9,   11,    0,    0,    0,   60,   63,   63,   63,   63,   63,   66,   69,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   60,   63,   63,   63,   63,   63,   66,   77,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,   37,   31,   33,   35,  -15,  -15,  -15,  -15,  -16,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,   74},
	{	9,  11,   0,   0,  59,  62,  65,  68,   0,   0,   0,  -12,    3,    9,   11,   24,   27,   53,   55,    0,    0,    0,    0,    0,    0,    0,    0,  -13,    4,   10,   12,    0,    0,  -13,    4,   10,   12,    0,    0,    0,   61,   64,   64,   64,   64,   64,   67,   70,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   60,   63,   63,   63,   63,   63,   66,   77,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,   38,   32,   34,   36,  -15,  -15,  -15,  -15,  -16,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,   37,   31,   33,   35,  -15,  -15,  -15,  -15,  -15,   74},
	{  10,  12,   0,   0,  61,  64,  67,  70,   0,   0,   0,  -13,    4,   10,   12,   25,   28,   53,   55,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,  -12,    3,    9,   11,    0,    0,    0,    0,    0,    0,   -9,  -10,  -10,  -10,  -10,  -10,  -11,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   60,   63,   63,   63,   63,   63,   66,   77,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,   37,   31,   33,   35,  -15,  -15,  -15,  -15,  -15,  -15,   38,   32,   34,   36,  -15,  -15,  -15,  -15,  -15,   74},
	{	9,  11,   0,   0,   0,  -9, -10, -11,   0,   0,   0,    0,    0,    0,    0,    0,    0,   53,   55,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,  -13,    4,   10,   12,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   60,   63,   63,   63,   63,   63,   66,   77,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,   37,   31,   33,   35,  -15,  -15,  -15,  -15,  -15,   38,   32,   34,   36,  -15,  -15,  -15,  -15,  -15,  -15,  -15,   37,   31,   33,   35,  -15,  -15,  -15,  -15,   74},
	{  10,  12,   0,   0,   0,   0,   0,   0,   0,   0,  -4,    0,    0,  -12,    3,    9,   11,   53,   55,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   60,   63,   63,   63,   63,   63,   66,   77,  -15,  -15,  -15,  -15,  -15,  -15,   37,   31,   33,   35,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,   38,   32,   34,   36,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,   38,   32,   34,   36,  -15,  -15,  -15,  -15,   74},
	{   9,  11,   0,   0,   0,   0,   0,   0,   0,   0,   0,    0,    0,  -13,    4,   10,   12,   53,   55,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   60,   63,   63,   63,   63,   63,   66,   77,  -15,  -15,  -15,  -15,  -15,  -15,   38,   32,   34,   36,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,   74},
	{  10,  12,   0,   0,   0,   0,   0,   0,   0,   0,   0,    0,    0,    0,    0,    0,    0,   53,   55,    0,    0,    0,    0,    0,   -4,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   50,   51,   52,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   60,   63,   63,   63,   63,   63,   66,   77,  -15,  -15,  -15,  -15,   37,   31,   33,   35,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,   74},
	{	9,  11,   0,   0,   0,   0,   0,   0,   0,   0,   0,    0,    0,    0,    0,    0,    0,   53,   55,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   53,   54,   55,    0,    0,    0,    0,    0,    0,  -12,    3,    9,   11,    0,    0,    0,    0,   60,   63,   63,   63,   63,   63,   66,   77,  -15,  -15,  -15,  -15,   38,   32,   34,   36,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,   74},
	{  10,  12,   0,   0,   0,   0,   0,   0,   0,   0,   0,    0,    0,    0,    0,    0,    0,   53,   55,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   56,   57,   58,    0,    0,    0,    0,    0,    0,  -13,    4,   10,   12,    0,    0,    0,    0,   60,   63,   63,   63,   63,   63,   66,   77,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,   37,   31,   33,   35,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,   74},
	{	9,  11,   0,   0,   0,   0,   0,   0,   0,   0,   0,    0,    0,    0,    0,    0,    0,   53,   55,    0,    0,    0,    0,    0,    0,    0,  -12,    3,    9,   11,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,  -12,    3,    9,   11,    0,    0,    0,   60,   63,   63,   63,   63,   63,   66,   77,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,   38,   32,   34,   36,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,   37,   31,   33,   35,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,   74},
	{  10,  12,   0, -12,   3,   9,  11,   0,   0,   0,   0,    0,    0,    0,    0,    0,    0,   53,   55,    0,    0,    0,    0,    0,    0,    0,  -13,    4,   10,   12,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,  -13,    4,   10,   12,    0,    0,    0,   60,   63,   63,   63,   63,   63,   66,   77,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,   38,   32,   34,   36,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,   74},
	{	9,  11,   0, -13,   4,  10,  12,   0,   0,   0,   0,    0,    0,    0,    0,    0,    0,   53,   55,    0,    0,    0,    0,    0,    0,    0,   -5,   -5,   -5,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   60,   63,   63,   63,   63,   63,   66,   77,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,   74}, //23
	{  10,  12,   0,   0, -12,   3,   9,  11,   0,   0,   0,    0,    0,    0,    0,    0,    0,   53,   55,    0,    0,    0,    0,    0,    0,  -12,    3,    9,   11,    0,    0,    0,    0,    0,    0,   -5,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   -5,    0,    0,   60,   63,   63,   63,   63,   63,   66,   77,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,   74}, //24
	{	9,  11,   0,   0, -13,   4,  10,  12,   0,   0,   0,    0,    0,    0,    0,    0,    0,   53,   55,    0,    0,    0,    0,    0,    0,  -13,    4,   10,   12,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   -4,    0,    0,    0,    0,    0,    0,    0,    0,    0,   60,   63,   63,   63,   63,   63,   66,   77,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -16,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,   74}, //25
	{  10,  12,   0,   0,   0,   0,   0,   0,   0,   0,   0,    0,    0,    0,    0,    0,    0,   53,   55,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   60,   63,   63,   63,   63,   63,   66,   77,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,   74}, //26
	{	9,  11,   0,   0,   0,   0,   0,   0,   0,   0,   0,    0,    0,    0,    0,    0,    0,   53,   55,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,  -14,  -14,  -14,  -14,    0,   60,   63,   63,   63,   63,   63,   66,   77,  -15,  -18,  -18,  -18,  -18,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,   74}, //27
	{  13,  14,  15,  15,  15,  15,  16,  17,   0,   0,   0,    0,    0,    0,    0,    0,    0,   53,   55,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,  -12,    3,    9,   11,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   60,   63,   63,   63,   63,   63,   66,   77,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,   37,   31,   33,   35,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,   74}, //28
	{	9,  11,   0,   0,   0,   0,   0,   0,   0,   0,   0,    0,    0,    0,    0,    0,    0,   53,   55,    0,    0,    0,    0,   41,   42,   42,   42,   42,   42,   42,   43,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,  -13,    4,   10,   12,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   60,   63,   63,   63,   63,   63,   66,   77,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,   38,   32,   34,   36,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,   74}, //29
	{  10,  12,   0,   0,   0,   0,   0,   0,   0,   0,   0,    0,    0,    0,    0,    0,   -3,   53,   55,    0,    0,    0,    0,   44,   45,   45,   45,   45,   45,   45,   46,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   -4,    0,    0,    0,  -12,    3,    9,   11,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   60,   63,   63,   63,   63,   63,   66,   77,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,   37,   31,   33,   35,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,   74}, //30
	{	9,  11,   0,   0,   0,   0,   0,   0,   0,   0,   0,    0,    0,   -5,   -3,   -3,   -5,   53,   55,    0,    0,    0,    0,   44,   45,   45,   45,   45,   45,   45,   46,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,  -13,    4,   10,   12,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   60,   63,   63,   63,   63,   63,   66,   77,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,   38,   32,   34,   36,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,   74},  //31
	{  10,  12,   0,   0,   0,  50,  51,  51,  51,  51,  51,   51,   51,   51,   51,   51,   51,   54,   54,   51,   51,   51,   52,   44,   45,   45,   45,   45,   45,   45,   46,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,  -12,    3,    9,   11,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,  -14,  -14,  -14,  -14,    0,   60,   63,   63,   63,   63,   63,   66,   77,  -15,  -18,  -18,  -18,  -18,  -15,  -15,  -15,  -15,  -15,  -15,  -16,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,   37,   31,   33,   35,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,   74}, //32
	{   9,  11,   0,  -8,   0,  53,  54,  54,  54,  54,  54,   54,   54,   54,   54,   54,   54,   54,   54,   54,   54,   54,   55,   44,   45,   45,   45,   45,   45,   45,   46,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,  -13,    4,   10,   12,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   60,   63,   63,   63,   63,   63,   66,   77,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -16,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,   38,   32,   34,   36,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,   74}, //33 
	{  10,  12,   0,   0,   0,  56,  57,  57,  57,  57,  57,   57,   57,   57,   57,   57,   57,   54,   54,   57,   57,   57,   58,   44,   45,   45,   45,   45,   45,   45,   46,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   60,   63,   63,   63,   63,   63,   66,   77,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,   74}, //34
	{	9,  11,   0,   0,   0,   0,   0,   0,   0,   0,   0,    0,    0,   -5,   -3,   -3,   -5,   53,   55,    0,    0,    0,    0,   44,   45,   45,   45,   45,   45,   45,   46,    0,    0,    0,  -12,    3,    9,   11,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,  -12,    3,    9,   11,    0,    0,    0,    0,    0,    0,    0,   60,   63,   63,   63,   63,   63,   66,   77,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,   37,   31,   33,   35,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,   74}, //35
	{  10,  12,   0,   0,   0,   0,   0,   0,   0,   0,   0,    0,    0,    0,    0,    0,   -3,   53,   55,    0,    0,    0,    0,   44,   45,   45,   45,   45,   45,   45,   46,    0,    0,    0,  -13,    4,   10,   12,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,  -13,    4,   10,   12,    0,    0,    0,   -5,    0,    0,    0,   60,   63,   63,   63,   63,   63,   66,   77,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,   38,   32,   34,   36,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,   74}, //36
	{   9,  11,   0,   0,   0,   0,   0,   0,   0,   0,   0,    0,    0,    0,    0,    0,    0,   53,   55,    0,    0,    0,    0,   47,   48,   48,   48,   48,   48,   48,   49,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,  -12,    3,    9,   11,    0,    0,    0,    0,    0,    0,    0,    0,    0,   60,   63,   63,   63,   63,   63,   66,   77,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,   37,   31,   33,   35,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,   74}, //37
	{  18,  19,  20,  20,  20,  20,  21,  22,   0,   0,   0,    0,    0,    0,    0,    0,    0,   53,   55,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,  -13,    4,   10,   12,    0,    0,    0,    0,    0,    0,    0,    0,    0,   60,   63,   63,   63,   63,   63,   66,   77,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,   38,   32,   34,   36,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,   74}, //38
	{   9,  11,   0,   0,   0,   0,   0,   0,   0,   0,   0,    0,    0,    0,    0,    0,    0,   53,   55,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,  -12,    3,    9,   11,    0,    0,    0,    0,   50,   52,    0,    0,    0,    0,    0,  -12,    3,    9,   11,    0,    0,    0,    0,    0,    0,    0,    0,   60,   63,   63,   63,   63,   63,   66,   77,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,   37,   31,   33,   35,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,   74}, //39
	{  10,  12,   0,   0,   0,   0,   0,   0,   0,   0,   0,    0,    0,    0,    0,    0,    0,   53,   55,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,  -13,    4,   10,   12,    0,    0,    0,    0,   53,   55,    0,    0,    0,    0,    0,  -13,    4,   10,   12,    0,    0,    0,    0,    0,    0,    0,    0,   60,   63,   63,   63,   63,   63,   66,   77,  -15,  -15,  -15,  -15,  -15,  -15,   73,   62,   62,   65,   76,  -15,  -15,  -15,  -15,  -15,  -15,  -15,   38,   32,   34,   36,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,   74}, //40
	{   9,  11,   0,   0,   0,   0,   0,   0,   0,   0,   0,    0,    0,    0,    0,    0,    0,   53,   55,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,  -12,    3,    9,   11,    0,    0,    0,    0,    0,   53,   55,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   60,   63,   63,   63,   63,   63,   66,   77,  -15,  -15,  -15,  -15,  -15,  -15,   74,   63,   63,   66,   77,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,   74}, //41
	{  10,  12,   0,   0,   0,   0,   0,   0,   0,   0,   0,    0,   -4,    0,    0,    0,    0,   53,   55,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,  -13,    4,   10,   12,   -4,    0,    0,    0,    0,   56,   58,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   60,   63,   63,   63,   63,   63,   66,   77,  -15,  -15,  -15,  -15,  -15,  -15,   75,   64,   64,   67,   78,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,   37,   31,   33,   35,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,   74}, //42
	{   9,  11,   0,   0,   0,   0,   0,   0,   0,   0,   0,    0,    0,    0,    0,    0,    0,   53,   55,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   60,   63,   63,   63,   63,   63,   66,   77,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -19,  -20,  -20,  -21,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,   38,   32,   34,   36,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,   74}, //43 
	{  10,  12,   0,   0, -12,   3,   9,  11,   0,   0,   0,    0,    0,    0,    0,    0,    0,   53,   55,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   59,   62,   62,   62,   65,   68,    0,    0,    0,    0,   60,   63,   63,   63,   63,   63,   66,   77,  -15,  -15,  -15,   37,   31,   33,   35,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,   74}, //44
	{   9,  11,   0,   0, -13,   4,  10,  12,   0,   0,   0,    0,    0,    0,    0,    0,   -3,   53,   55,   -3,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   -6,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   60,   63,   63,   63,   66,   69,    0,    0,    0,    0,   60,   63,   63,   63,   63,   63,   66,   77,  -15,  -15,  -15,   38,   32,   34,   36,  -15,  -15,  -15,  -15,   73,   62,   62,   65,   76,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,   37,   31,   33,   35,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,   37,   31,   33,   35,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,   74}, //45
	{  10,  12,   0,   0,   0,   0,   0,   0,   0,   0,   0,    0,    0,    0,    0,    0,   -3,   53,   55,   -3,    0,    0,    0,  -12,    3,    9,   11,    0,    0,    0,    0,    0,    0,   -7,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   60,   63,   63,   63,   66,   69,    0,    0,    0,    0,   60,   63,   63,   63,   63,   63,   66,   77,  -15,  -15,   37,   31,   33,   35,  -15,  -15,  -15,  -15,  -15,   74,   63,   63,   66,   77,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,   38,   32,   34,   36,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,   38,   32,   34,   36,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,   74}, //46
	{   9,  11,   0,   0,   0,   0,   0,   0,   0,   0,   0,    0,    0,    0,    0,    0,   -3,   53,   55,   -3,    0,    0,    0,  -13,    4,   10,   12,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   61,   64,   64,   64,   67,   70,    0,    0,    0,    0,   60,   63,   63,   63,   63,   63,   66,   77,  -15,  -15,   38,   32,   34,   36,  -15,  -15,  -15,  -15,  -15,   74,   63,   63,   66,   77,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,   37,   31,   33,   35,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,   74}, //47
	{  10,  12,   0,  59,  62,  65,  68,   0,   0,   0,   0,  -12,    3,    9,   11,    0,    0,   53,   55,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,  -12,    3,    9,   11,    0,    0,    0,    0,    0,    0,   -9,  -10,  -10,  -10,  -11,    0,    0,    0,    0,   60,   63,   63,   63,   63,   63,   66,   77,  -15,  -15,  -15,  -15,   73,   62,   62,   65,   76,  -15,  -15,   75,   64,   64,   67,   78,  -15,  -15,  -15,  -15,  -16,  -16,  -15,  -15,   37,   31,   33,   35,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,   38,   32,   34,   36,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,   74}, //48
	{   9,  11,   0,  60,  63,  66,  69,   0,   0,   0,   0,  -13,    4,   10,   12,    0,    0,   53,   55,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,  -13,    4,   10,   12,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   60,   63,   63,   63,   63,   63,   66,   77,  -15,  -15,  -15,  -15,   74,   63,   66,   66,   77,  -15,  -15,  -15,  -19,  -20,  -20,  -21,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,   38,   32,   34,   36,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,   73,   62,   62,   65,   76,  -15,  -15,  -15,  -15,   74}, //49
	{  10,  12,   0,  60,  63,  66,  69,   0,   0,   0,   0,    0,    0,   50,   51,   52,    0,   53,   55,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,  -12,    3,    9,   11,    0,    0,    0,    0,    0,    0,    0,    0,    0,  -12,    3,    9,   11,    0,    0,    0,    0,    0,   -4,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   60,   63,   63,   63,   63,   63,   66,   77,  -15,  -15,  -15,  -15,   75,   64,   67,   67,   78,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,   74,   63,   63,   66,   77,  -15,  -15,  -15,  -15,   74}, //50
	{   9,  11,   0,  61,  64,  67,  70,   0,   0,   0,   0,    0,    0,   53,   54,   55,    0,   56,   58,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,  -13,    4,   10,   12,    0,    0,    0,    0,    0,    0,    0,    0,    0,  -13,    4,   10,   12,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   60,   63,   63,   63,   63,   63,   66,   77,  -15,  -15,  -15,  -15,  -15,  -19,  -20,  -20,  -21,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,   75,   64,   64,   67,   78,  -15,  -15,  -15,  -15,   74}, //51
	{  10,  12,   0,   0,  -9, -10, -11,   0,   0,   0,   0,    0,    0,   56,   57,   58,    0,   -5,   -5,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,  -12,    3,    9,   11,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   60,   63,   63,   63,   63,   63,   66,   77,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -19,  -20,  -20,  -21,  -15,  -15,  -15,  -15,   74}, //52
	{   9,  11,   0,   0,   0,   0,   0,   0,   0,  -4,   0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   -4,    0,    0,    0,    0,    0,    0,    0,  -13,    4,   10,   12,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   60,   63,   63,   63,   63,   63,   66,   77,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,   74}, //53
	{  10,  12,   0,   0, 	0,   0,   0,   0,   0,   0,   0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   61,   72,   63,   63,   63,   63,   66,   77,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,   74}, //54
	{   9,  -1,   3,   5, 	1,   3,   5,   1,   3,   5,   1,    3,    5,    1,    3,    5,    1,    3,    5,    1,    3,    5,    1,    3,    5,    1,    3,    5,    1,    3,    5,    1,    3,    5,    1,    3,    5,    1,    3,    5,    1,    3,    5,    1,    3,    5,    1,    3,    5,    1,    3,    5,    1,    3,    5,    1,    3,    5,    1,    3,    5,    1,    3,    5,   60,   63,   63,   63,   63,   66,   77,   37,   31,   33,   29,   31,   33,   29,   31,   33,   29,   31,   33,   29,   31,   33,   29,   31,   33,   29,   31,   33,   29,   31,   33,   29,   31,   33,   29,   31,   33,   29,   31,   33,   29,   31,   33,   29,   31,   33,   29,   31,   33,   29,   31,   33,   29,   31,   33,   29,   31,   33,   29,   31,   33,   39,  -17,   74}, //55
	{  10,  -2,   4,   6, 	2,   4,   6,   2,   4,   6,   2,    4,    6,    2,    4,    6,    2,    4,    6,    2,    4,    6,    2,    4,    6,    2,    4,    6,    2,    4,    6,    2,    4,    6,    2,    4,    6,    2,    4,    6,    2,    4,    6,    2,    4,    6,    2,    4,    6,    2,    4,    6,    2,    4,    6,    2,    4,    6,    2,    4,    6,    2,    4,    6,   61,   64,   64,   64,   64,   67,   78,   38,   32,   34,   30,   32,   34,   30,   32,   34,   30,   32,   34,   30,   32,   34,   30,   32,   34,   30,   32,   34,   30,   32,   34,   30,   32,   34,   30,   32,   34,   30,   32,   34,   30,   32,   34,   30,   32,   34,   30,   32,   34,   30,   32,   34,   30,   32,   34,   30,   32,   34,   30,   32,   34,   40,  -17,   75}, //56
//	{   0,   0,   0,   0, 	0,   0,   0,   0,   0,   0,   0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0}, //57
//	{   0,   0,   0,   0, 	0,   0,   0,   0,   0,   0,   0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0}, //58
//	{   0,   0,   0,   0, 	0,   0,   0,   0,   0,   0,   0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0}, //59
//	{   0,   0,   0,   0, 	0,   0,   0,   0,   0,   0,   0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0}, //60
//	{   0,   0,   0,   0, 	0,   0,   0,   0,   0,   0,   0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0} //61
//  {   0,   0,   0,   0, 	0,   0,   0,   0,   0,   0,   0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0} //~
};

// Function prototype
void initTexture();
void initVariables();
void setTiles();
void chasePlayer(int i, int deltaTime);
void enemyAIDecisions(int deltaTime);
void getInput(int deltaTime);
void setPlayerPhi(bool left, bool right, bool up, bool down);
void setProjectile(int deltaTime);
void moveProjectile();
void setEnemyProjectile(int deltaTime, int i);
void moveEnemyProjectile(int h);
void getCameraInput();
void setCamera();
void setAnimationDef();
void setEnemyAnimationDef();
void updateAnimation();
void updateEnemyAnimation();
void drawTiles();
void drawSprites();
void drawProjectiles();
void drawPlayerHealth();
void backgroundCollisionDetection(int deltaTime);
void objectCollisionDetection();
bool collisionDetection(int playX, int playY, int playWidth, int playHeight, int objX, int objY, int objWidth, int objHeight);
float randomGenerator(float MAX, float MIN);

// Set this to true to make the game loop exit.
char shouldExit = 0;

// The previous frame's keyboard state.
unsigned char kbPrevState[SDL_NUM_SCANCODES] = { 0 };

// The current frame's keyboard state.
const unsigned char* kbState = NULL;
const double projectileVelocity = 10.0f;

// Texture for the sprite.
GLuint spriteTex;
GLuint enemySpriteTex[enemyCount];
GLuint playerHealth;
GLuint playerProjectile;
GLuint enemyProjectile;
GLuint grassTile;
GLuint grassTile2;
GLuint bigTree;
GLuint bigTreePlatform;
GLuint kingProjectiles[2];
GLuint plyrProjectile[4];

// Size of the sprite.
int spriteSize[2];
int enemySize[2];
int bossSize[2] = { 224, 224};
int heartSize[2] = { 32, 32};
int bigTreeSize[2] = { 268, 129 };
int bigTreePlatformSize[2] = { 268, 115};
int projectileSize[2] = { 68, 69 };
int enemyProjectileSize[2] = { 12, 13};
int kingProjectileSize[2] = {44, 36};

// Speed variables to be multiplied by time for sprite distance/position
float speed = .55f;
float reducedSpeed = .40f;

// Animation timer and counters
int animationCounter = 0;
int animationCounter2 = 6;
int animationCounter3 = 12;
int animationCounter4 = 18;
int dTime;
int arraySize = (sizeof(animDef.frames)/sizeof(animDef.frames[0]));

int enAnimationCounter = 0;
int enAnimationCounter2 = 4;
int enAnimationCounter3 = 12;
int enAnimationCounter4 = 16;
int bossCounter1 = 20;
int bossCounter2 = 28;
int enDeathCounter[enemyCount] = { 8 };
int enArraySize = (sizeof(enAnimDef.frames)/sizeof(enAnimDef.frames[0]));
int enDeltaTime[enemyCount];

long projectileCounter = 135;
long projectileGap;
long secsUntilNextProjectile;
long enemyProjectileCounter = 180;
long enemyProjectileGap[enemyCount];
long enemySecsUntilNextProjectile;

// Line of sight
bool collisionWithCamera[enemyCount];

// Last key pressed and player direction
std::string lastKeyPressed = "";

// Screen properties and level dimensions
const int SCREEN_WIDTH = 800;
const int SCREEN_HEIGHT = 600;
const int LEVEL_WIDTH = 1792; //1800;
const int LEVEL_HEIGHT = 4096;//2048;

// Tile properties
int TILE_WIDTH = 32;
int TILE_HEIGHT = 32;
int STUMP_WIDTH = 64;
int STUMP_HEIGHT = 38;
int TREE_WIDTH = 64;
int TREE_HEIGHT = 104;
int BIG_TREE_WIDTH = 268;
int BIG_TREE_HEIGHT = 205;
int teleporterSize[2] = { 64, 44 };
int TILE_X;
int TILE_Y;
int ENDPOINT_X;
int ENDPOINT_Y;
int counter = 0; // For enemies

// Music Files
Mix_Chunk *playerProjectileSound = NULL;
Mix_Chunk *enemyProjectileSound = NULL;
Mix_Music *bgMusic = NULL;

// Objects
Object teleporters[2];

int main(int argc, char* argv[])
{
	// Initialize SDL.
	if (SDL_Init(SDL_INIT_VIDEO) < 0)
	{
		fprintf(stderr, "Could not initialize SDL. ErrorCode=%s\n", SDL_GetError());
		return 1;
	}

	// Initialize audio
	if (SDL_Init(SDL_INIT_AUDIO) < 0)
	{
		fprintf(stderr, "Could not initialize SDL audio. ErrorCode=%s\n", SDL_GetError());
		return 1;
	}

	//Initialize SDL_mixer 
	if( Mix_OpenAudio( 22050, MIX_DEFAULT_FORMAT, 2, 4096 ) == -1 ) 
	{
		return 1; 
	}

	// Load our sound effect
	playerProjectileSound = Mix_LoadWAV("Sounds/Player/player_shoot.wav");
	enemyProjectileSound = Mix_LoadWAV("Sounds/Enemy/poring.wav");
	if (playerProjectileSound == NULL)
	{
		fprintf(stderr, "Could not initialize SDL sounds. ErrorCode = %s\n", SDL_GetError());
		return -1;
	}

	// Load our music
	MIX_INIT_MP3;
	bgMusic = Mix_LoadMUS("Sounds/BG/Wanna be Free.wav");
	if (bgMusic == NULL)
	{
		fprintf(stderr, "Could not initialize SDL background music. ErrorCode = %s\n", SDL_GetError());
		return -1;
	}

	// Create the window and OpenGL context.
	SDL_GL_SetAttribute(SDL_GL_BUFFER_SIZE, 32);
	SDL_GL_SetAttribute(SDL_GL_DOUBLEBUFFER, 1);
	SDL_Window* window = SDL_CreateWindow(
		"Slime Hero by Kyle Del Castillo",
		SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED,
		800, 600,
		SDL_WINDOW_OPENGL);

	if (!window)
	{
		fprintf(stderr, "Could not create window. ErrorCode=%s\n", SDL_GetError());
		SDL_Quit();
		return 1;
	}
	SDL_GL_CreateContext(window);

	// Make sure we have a recent version of OpenGL.
	GLenum glewError = glewInit();
	if (glewError != GLEW_OK)
	{
		fprintf(stderr, "Could not initialize glew. ErrorCode=%s\n", glewGetErrorString(glewError));
		SDL_Quit();
		return 1;
	}
	if (GLEW_VERSION_2_0)
	{
		fprintf(stderr, "OpenGL 2.0 or greater supported: Version=%s\n",
			glGetString(GL_VERSION));
	}
	else
	{
		fprintf(stderr, "OpenGL max supported version is too low.\n");
		SDL_Quit();
		return 1;
	}

	// Setup OpenGL state.
	glViewport(0, 0, SCREEN_WIDTH, SCREEN_HEIGHT);
	glMatrixMode(GL_PROJECTION);
	glOrtho(0, SCREEN_WIDTH, SCREEN_HEIGHT, 0, 0, 100);
	glEnable(GL_TEXTURE_2D);
	glEnable(GL_BLEND);
	glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);

	// Game initialization goes here.
	srand(time(0)); //Seed random number
	initTexture();
	initVariables();

	// Set frame timers
	long curFrameMS = SDL_GetTicks();
	long lastFrameMS;
	long deltaTime;

	// Set animation properties
	setAnimationDef();
	setEnemyAnimationDef();
	setTiles();

	
	// Play background music after loading everything
	Mix_VolumeMusic(50);
	if ( Mix_PlayMusic( bgMusic, -1) == -1 )
	{
		fprintf(stderr, "Could not play SDL background music. ErrorCode = %s\n", SDL_GetError());
		return -1;
	}

	// The game loop.
	kbState = SDL_GetKeyboardState(NULL);

	while (!shouldExit)
	{
		assert(glGetError() == GL_NO_ERROR);
		memcpy(kbPrevState, kbState, sizeof(kbPrevState));

		// Handle OS message pump.
		SDL_Event event;
		while (SDL_PollEvent(&event))
		{
			switch (event.type)
			{
				case SDL_QUIT:
					shouldExit = 1;
			}
		}
		
		// Set last frame and update animation frame
		lastFrameMS = curFrameMS;

		// Calculate time
		curFrameMS = SDL_GetTicks();
		deltaTime = (curFrameMS - lastFrameMS);
		animation.secsUntilNextFrame += deltaTime; 
		enAnimation.secsUntilNextFrame += (deltaTime-2);
		enAnimation2.secsUntilNextFrame += (deltaTime-2);
		enAnimation0.secsUntilNextFrame += (deltaTime-3);
		bossAnimation.secsUntilNextFrame += (deltaTime-3);
		secsUntilNextProjectile += deltaTime;
		enemySecsUntilNextProjectile += deltaTime;
		enemies[counter].secsUntilNextProjectile += deltaTime;
		counter++;
		if(counter >= enemyCount)
		{
			counter = 0;
		}
		
		// Game logic goes here.
		// Player movement
		getInput(deltaTime);

		// Update Animation
		updateAnimation();
		updateEnemyAnimation();
		
		// Set camera coordinates
		setCamera();

		// Store camera settings
		glPushMatrix();
		glTranslatef(-cam.x, -cam.y, 0);

		// AI Decision Making - will move to Enemy class later
		enemyAIDecisions(deltaTime);

		// Background Collision Detection
		backgroundCollisionDetection(deltaTime);
		objectCollisionDetection();

		glClearColor(0.275f, 0.510f, 0.706f, 1);
		glClear(GL_COLOR_BUFFER_BIT);

		// Game drawing goes here.
		// Draw tiles based on camera
		drawTiles();

		// Draw Sprites
		drawSprites();
		drawProjectiles();
		drawPlayerHealth();

		// Reset the player
		if(player.hp <= 0)
		{
			player.reset();
			enemies[counter].reset(counter);
		}

		// Present the most recent frame.
		SDL_GL_SwapWindow(window);

		// Reset camera settings
		glPopMatrix();
	}

	// clean up our resources
	Mix_FreeChunk(playerProjectileSound);
	Mix_FreeChunk(enemyProjectileSound);
	Mix_FreeMusic(bgMusic);
	
	// quit SDL_mixer
	Mix_CloseAudio();
	
	SDL_Quit();

	return 0;
}

void initTexture()
{
	spriteTex = glTexImageTGAFile("Texture/Player Sprite/Elazul/elazulStandby.tga", &spriteSize[0], &spriteSize[1]);
	int enemyProjectileSize2[2] = { 15, 15 }; 
	for(int i = 0; i < enemyCount; i++)
	{
		// Set specific sprites based on enemy count
		if(i >= 21 && i < 40)
		{
			enemySpriteTex[i] = glTexImageTGAFile("Texture/Monster Sprites/pouring1.tga", &enemySize[0], &enemySize[1]);
			enemies[i].projectile = glTexImageTGAFile("Texture/Projectile/enemyProjectile2.tga", &enemyProjectileSize2[0], &enemyProjectileSize2[1]);
		}
		else if(i <= 20)
		{
			enemySpriteTex[i] = glTexImageTGAFile("Texture/Monster Sprites/poring1.tga", &enemySize[0], &enemySize[1]);
			enemies[i].projectile = glTexImageTGAFile("Texture/Projectile/enemyProjectile.tga", &enemyProjectileSize[0], &enemyProjectileSize[1]);
		}
		else if(i == 40)
		{
			int bSize[2] = {300, 300};
			enemySpriteTex[i] = glTexImageTGAFile("Texture/Monster Sprites/king1.tga", &bossSize[0], &bossSize[1]);
			enemies[i].projectile = glTexImageTGAFile("Texture/Projectile/kingProjectile1.tga", &kingProjectileSize[0], &kingProjectileSize[1]);
		}
	}

	// Grass and Tree Textures
	grassTile = glTexImageTGAFile("Texture/Tiles/grass.tga", &TILE_WIDTH, &TILE_HEIGHT);
	grassTile2 = glTexImageTGAFile("Texture/Tiles/grass2.tga", &TILE_WIDTH, &TILE_HEIGHT);
	bigTree = glTexImageTGAFile("Texture/Tiles/bigTreeStump.tga", &bigTreeSize[0], &bigTreeSize[1]);
	bigTreePlatform = glTexImageTGAFile("Texture/Tiles/bigTreeStand.tga", &bigTreePlatformSize[0], &bigTreePlatformSize[1]);

	// Objects
	teleporters[0].sprite = glTexImageTGAFile("Texture/Misc/teleporter.tga", &teleporterSize[0], &teleporterSize[1]);
	teleporters[1].sprite = glTexImageTGAFile("Texture/Misc/teleporter2.tga", &teleporterSize[0], &teleporterSize[1]);

	// Projectiles
	playerProjectile = glTexImageTGAFile("Texture/Projectile/blueFireballDown.tga", &projectileSize[0], &projectileSize[1]);
	//enemyProjectile = glTexImageTGAFile("Texture/Projectile/enemyProjectile.tga", &enemyProjectileSize[0], &enemyProjectileSize[1]);
	kingProjectiles[0] = glTexImageTGAFile("Texture/Projectile/kingProjectile1.tga", &kingProjectileSize[0], &kingProjectileSize[1]);
	kingProjectiles[1] = glTexImageTGAFile("Texture/Projectile/kingProjectile2.tga", &kingProjectileSize[0], &kingProjectileSize[1]);

	plyrProjectile[0] = glTexImageTGAFile("Texture/Projectile/blueFireballLeft.tga", &projectileSize[0], &projectileSize[1]); // Left
	plyrProjectile[1] = glTexImageTGAFile("Texture/Projectile/blueFireballRight.tga", &projectileSize[0], &projectileSize[1]); // Right
	plyrProjectile[2] = glTexImageTGAFile("Texture/Projectile/blueFireballUp.tga", &projectileSize[0], &projectileSize[1]); // Up
	plyrProjectile[3] = glTexImageTGAFile("Texture/Projectile/blueFireballDown.tga", &projectileSize[0], &projectileSize[1]); // Down

	// Player heart
	playerHealth = glTexImageTGAFile("Texture/Misc/Heart.tga", &heartSize[0], &heartSize[1]);
}
void initVariables()
{
	// Set player & enemy coordinates
	player.x = (LEVEL_WIDTH/2) + 115.0f;
	player.y = 120.0f;
	player.dx = 0;
	player.dy = 0;
	player.phi = 3.14f;
	player.velocity = 0.55f;
	player.w = spriteSize[0];
	player.h = spriteSize[1];

	// Projectile properties
	playerProj[0].x = player.x;
	playerProj[0].y = player.y;
	playerProj[0].damage = 1;
	enemies[0].speed = 0.10;
	enemies[1].speed = 0.125f;
	enemies[2].speed = 0.15f;

	for(int i = 0; i < enemyCount; i++)
	{
		if(i <= 20)
		{
			enemies[i].x = randomGenerator(1600.f, 350.f);
			enemies[i].y = randomGenerator(1700.f, 300.f);
			enemies[i].w = enemySize[0];
			enemies[i].h = enemySize[1];
			enemies[i].health = 5;
		}
		else if(i >= 21 && i < 40)
		{	
			enemies[i].x = randomGenerator(1400.f, 300.f);
			enemies[i].y = randomGenerator(2950.f, 2800.f);
			enemies[i].w = enemySize[0];
			enemies[i].h = enemySize[1];
			enemies[i].health = 10;
			enemies[i].speed = 0.18f;
		}
		else if(i == 40)
		{
			printf("BOSS VARIABLE INITIATED\n");
			enemies[i].x = LEVEL_WIDTH/2;
			enemies[i].y = LEVEL_HEIGHT - 600;
			enemies[i].w = bossSize[0];
			enemies[i].h = bossSize[1];
			enemies[i].health = 100;
			enemies[i].speed = 0.20f;
		}
	}

	// Camera properties
	cam.w = SCREEN_WIDTH;
	cam.h = SCREEN_HEIGHT;

	// Teleporter properties
	teleporters[0].x = LEVEL_WIDTH/2;
	teleporters[0].y = 1900;
	teleporters[0].w = teleporterSize[0];
	teleporters[0].h = teleporterSize[1];
	teleporters[0].isCollideable = true;

	teleporters[1].x = LEVEL_WIDTH/2;
	teleporters[1].y = 2300;
	teleporters[1].w = teleporterSize[0];
	teleporters[1].h = teleporterSize[1];
	teleporters[1].isCollideable = true;
}
void setTiles()
{
	for(int i = 0; i < TILE_COLUMNS; i++)
	{
		for(int j = 0; j < TILE_ROWS; j++)
		{
			bgTiles[i][j].value = tileMap[i][j];
			bgTiles[i][j].setTile(i, j);
		}
	}
}

void enemyAIDecisions(int deltaTime)
{
	bool decisionCamera[enemyCount];
	for(int i = 0; i < enemyCount; i++)
	{
		decisionCamera[i] = collisionDetection(cam.x, cam.y, cam.w, cam.h, enemies[i].x, enemies[i].y, enemySize[0], enemySize[1]);

		// Make sure enemy is alive before making decision
		if(enemies[i].health > 0)
		{
			enemies[i].distance[0] = abs(enemies[i].x - player.x);
			enemies[i].distance[1] = abs(enemies[i].y - player.y);
			// Increase the line of sight of the boss
			if(i == 40)
			{
				enemies[i].distance[0] -= 100;
				enemies[i].distance[1] -= 100;
			}

			// Chase player if player gets close
			if(enemies[i].distance[0] <= 240 && enemies[i].distance[1] <= 240)
			{
				chasePlayer(i, deltaTime);
			}
			else
			{
				// If enemy needs to make a new decision and timer is set
				if(enemies[i].needDecision == true && enemies[i].decisionTimer > 0)
				{
					// Make a new decision
					enemies[i].setDecision(enemies[i].makeDecision());
					enemies[i].needDecision = false;
				}
			
				// Reset the timer for the enemy
				if(enemies[i].decisionTimer <= 0)
				{
					enemies[i].decisionTimer = 30.f;
					enemies[i].needDecision = true;
				}
				else
				{
					// Execute the decision
					enemies[i].decisionTimer--;
					enemies[i].executeDecision(deltaTime, enemies[i].getDecision());
				}
			}
			
			
		}
		if(i < 40)
		{
			moveEnemyProjectile(i);
		}
	}
}
void chasePlayer(int i, int deltaTime)
{
	
	/* CHASE PLAYER USING LINE OF SIGHT */
	if(enemies[i].distance[0] <= 230 && enemies[i].distance[1] <= 230)
	{
		if(i < 40)
		{
			// Set projectile only when enemy sees player
			setEnemyProjectile(deltaTime, i);
			//enemies[i].setProjectile(deltaTime, enemySecsUntilNextProjectile); // Move later to class 
		}

		// Reset
		enemies[i].movingLeft = false;
		enemies[i].movingRight = false;
		enemies[i].movingUp = false;
		enemies[i].movingDown = false;

		// If enemy is farther away
		if (enemies[i].x >= player.x)
		{
			// Move back towards the player
			enemies[i].movingLeft = true;
			enemies[i].x -= enemies[i].speed * deltaTime;

			/* EDGE CASES */
			if(enemies[i].y > player.y+30) // Shoot northwest
			{
				enemies[i].phi = -0.75;
			}
			else if(enemies[i].y < player.y-30) // Shot southwest
			{
				enemies[i].phi = -2.4f;
			}
		}

		// If enemy is behind player
		if (enemies[i].x < player.x)
		{
			// Move towards the player
			enemies[i].movingRight = true;
			enemies[i].x += enemies[i].speed * deltaTime;

			/* EDGE CASES */
			if(enemies[i].y >= player.y) // Shoot northeast
			{
				enemies[i].phi = 0.75;
			}
			else if(enemies[i].y <= player.y) // Shot southeast
			{
				enemies[i].phi = 2.4f;
			}
			
		}
		
		// Set Y direction and move
		if (enemies[i].y >= player.y)
		{
			enemies[i].y -= enemies[i].speed * deltaTime;
			enemies[i].movingUp = true;
		}

		if (enemies[i].y < player.y)
		{
			enemies[i].y += enemies[i].speed * deltaTime;
			enemies[i].movingDown = true;
		}
		
		// Set back to shoot upwards if within the range
		if (enemies[i].y > player.y && enemies[i].x >= player.x-40 && enemies[i].x <= player.x+40)
		{
			enemies[i].phi = 0.0f;
		}

		// Set back to shoot downwards if within the range
		if (enemies[i].y < player.y && enemies[i].x >= player.x-40 && enemies[i].x <= player.x+40)
		{
			enemies[i].phi = 3.14f;
		}

		// If player and enemy is on the same Y plane but different X coordinate, set to shoot horizontally to the left
		if(enemies[i].y >= player.y-40 && enemies[i].y <= player.y+40 && enemies[i].x >= player.x)
		{
			enemies[i].phi = -1.56f;
		}

		// If player and enemy is on the same Y plane but different X coordinate, set to shoot horizontally to the right
		if(enemies[i].y >= player.y-40 && enemies[i].y <= player.y+40 && enemies[i].x <= player.x)
		{
			enemies[i].phi = 1.56f;
		}
		
		if(i < 40)
		{
			// Play the shooting sound
			if(enemies[i].distance[0] <= 180 && enemies[i].distance[1] <= 180)
			{
				Mix_Volume(2, 128);
				Mix_FadeInChannel(2, enemyProjectileSound, 0, 10);
			}
			else
			{
				Mix_HaltChannel(2);
			}
		}
	}
}

/* KEY MOVEMENT AND WINDOW VIEWPORT CHECKS */
void getInput(int deltaTime)
{
	player.isWalkingUp = false;
	player.isWalkingDown = false;
	player.isWalkingLeft = false;
	player.isWalkingRight = false;
	player.isAttacking = false;
	player.onStandby = true;

	bool left = kbState[SDL_SCANCODE_LEFT];
	bool right = kbState[SDL_SCANCODE_RIGHT] ; 
	bool up = kbState[SDL_SCANCODE_UP];
	bool down = kbState[SDL_SCANCODE_DOWN];
	
	if (kbState[SDL_SCANCODE_ESCAPE])
	{
		shouldExit = 1;
	}
	
	// Left keyboard movement
	if (left)
	{
		player.x -= speed * deltaTime;
		player.isWalkingLeft = true;
		player.onStandby = false;
		player.phi = -1.56f; 
		lastKeyPressed = "left";
	}

	// Right keyboard movement
	if (right)
	{
		player.x += speed * deltaTime;
		player.isWalkingRight = true;
		player.onStandby = false;
		player.phi = 1.56f;
		lastKeyPressed = "right";
	}

	// Up keyboard movement
	if (up)
	{
		player.y -= speed * deltaTime;
		player.isWalkingUp = true;
		player.onStandby = false;
		player.phi = 0;
		lastKeyPressed = "up";
	}

	// Down keyboard movement 
	if (down)
	{
		player.y += speed * deltaTime;
		player.isWalkingDown = true;
		player.onStandby = false;
		player.phi = 3.14f;
		lastKeyPressed = "down";
	}

	// Set projectile direction
	setPlayerPhi(left, right, up, down);

	if (kbState[SDL_SCANCODE_X])
	{
		Mix_Volume(1, 100);
		if( Mix_PlayChannel(1, playerProjectileSound, 0) == -1 )
		{
			//return;
		}
		player.isAttacking = true;

		// Set projectile motion
		setProjectile(deltaTime);
	}

	// Move projectile
	moveProjectile();
}	

void setPlayerPhi(bool left, bool right, bool up, bool down)
{
	if(left && up)
	{
		player.phi = -0.75f;
	}
	else if(right && up)
	{
		player.phi = 0.75f;
	}
	else if(left && down)
	{
		player.phi = -2.4f;
	}
	else if(right && down)
	{
		player.phi = 2.4;
	}
}
void setProjectile(int deltaTime)
{
	int count = 0;
	projectileGap = projectileCounter - secsUntilNextProjectile; //Delta time for projectile

	// Set projectile properties
	if(player.isAttacking == true && projectileGap <= 0)
	{
		// 100 projectiles on the screen
		for(count = 0; count < 100; count++)
		{
			if(playerProj[count].isActive == false)
			{
				playerProj[count].isActive = true;
				playerProj[count].x = player.x;
				playerProj[count].y = player.y;
				playerProj[count].dx = sin(player.phi) * (deltaTime * 1.5f);
				playerProj[count].dy = cos(player.phi) * (-deltaTime * 1.5f);
				projectileCounter = 125;
				break;
			}
		}
		player.isAttacking = false;
		secsUntilNextProjectile = 0;
	}
}
void moveProjectile()
{
	bool hit[enemyCount];
	
	for(int j = 0; j < 100; j++)
	{
		if(playerProj[j].isActive)
		{
			playerProj[j].x += playerProj[j].dx;
			playerProj[j].y += playerProj[j].dy;
		}

		// For every enemy, check if hit
		for(int h = 0; h < enemyCount; h++)
		{
			// Ensure enemy is not dead
			if(enemies[h].health > 0)
			{
				if(h == 40)
				{
					hit[h] = collisionDetection(playerProj[j].x, playerProj[j].y, projectileSize[0]/2, projectileSize[1]/2, enemies[h].x, enemies[h].y, bossSize[0]/2, bossSize[1]);
				}
				else
				{
					hit[h] = collisionDetection(playerProj[j].x, playerProj[j].y, projectileSize[0]/2, projectileSize[1]/2, enemies[h].x, enemies[h].y, enemySize[0]/2, enemySize[1]/2);
				}
			}
			else
			{
				hit[h] = false;
			}

			// If projectile hits enemy,
			if(hit[h]) 
			{
				// Enemy loses health when hit
				// Make sure the projectile is active before taking damage
				if(playerProj[j].isActive)
				{
					enemies[h].health -= 1;
					enemies[h].speak();
				}

				// Delete enemy object when hp is 0 - CAUSES HEAP MEMORY ERRORS AFTER CLOSING GAME
				//if(enemy->health <= 0)
				//{
				//	delete enemy;
				//}

				playerProj[j].isActive = false;
			}
		}
		
		// Projectile collision with background tiles
		for(int i = TILE_X; i <= ENDPOINT_X; i++) // X coordinate
		{
			for(int k = TILE_Y; k <= ENDPOINT_Y; k++) // Y coordinate
			{
				// Hit tiles that are collidable only
				if(bgTiles[i][k].collidable)
				{ 
					bool hitTiles = collisionDetection(playerProj[j].x, playerProj[j].y, projectileSize[0]/2, projectileSize[1]/2, bgTiles[i][k].x, bgTiles[i][k].y, bgTiles[i][k].w/8, bgTiles[i][k].h/4);

					// If projectile hits tiles (except water), destroy projectile
					if(hitTiles && bgTiles[i][k].tileType != 1)
					{
						playerProj[j].isActive = false;
					}
				}
			}
		}

		// If projectile goes outside the level
		if(playerProj[j].isActive == true && (playerProj[j].x > LEVEL_WIDTH || playerProj[j].x < -20 || playerProj[j].y > LEVEL_HEIGHT || playerProj[j].y < -20))
		{
			// Destroy projectile
			playerProj[j].isActive = false;
		}
	}
}

// Temporarly projectile function for enemy 
void setEnemyProjectile(int deltaTime, int k)
{
	enemyProjectileGap[k] = enemyProjectileCounter - enemySecsUntilNextProjectile; //Delta time for projectile
	
	for(int j = 0; j < enemyCount; j++)
	{
		if(enemies[j].health > 0)
		{
			// Set projectile properties
			if(enemies[j].distance[0] <= 180 && enemies[j].distance[1] <= 180 && enemyProjectileGap[k] <= 0)
			{
				// 100 projectiles on the screen
				for(int i = 0; i < enemyTotalProjectile; i++)
				{
					if(enemyProj[j][i].isActive == false)
					{
						enemyProj[j][i].isActive = true;
						enemyProj[j][i].x = enemies[j].x+(enemies[j].h/2);
						enemyProj[j][i].y = enemies[j].y+(enemies[j].w/2);
						enemyProj[j][i].dx = sin(enemies[j].phi) * (deltaTime * 0.450f);
						enemyProj[j][i].dy = cos(enemies[j].phi) * (-deltaTime * 0.450f);
					
						enemyProjectileCounter = 160;
						enemies[j].projectileCounter = 180;
						break;
					}
				}

				enemySecsUntilNextProjectile = 0;
				enemies[j].secsUntilNextProjectile = 0;
				enemies[j].projectileIsSet = true;
			}
		}
		else
		{
			enemies[j].projectileIsSet = false;
		}
	}
}
void moveEnemyProjectile(int h)
{
	bool hit;
	
	for(int i = 0; i < enemyTotalProjectile; i++)
	{
		if(enemyProj[h][i].isActive)
		{
			enemyProj[h][i].x += enemyProj[h][i].dx;
			enemyProj[h][i].y += enemyProj[h][i].dy;
		}

		hit = collisionDetection(enemyProj[h][i].x, enemyProj[h][i].y, enemyProjectileSize[0], enemyProjectileSize[1], player.x, player.y, player.w/2, player.h/2);
		// If projectile hits player,
		if(hit) 
		{
			// Player takes damage
			// Make sure the projectile is active before taking damage
			if(enemyProj[h][i].isActive)
			{
				player.hp -= 1;	
				player.speak();
			}

			enemyProj[h][i].isActive = false;
		}

		// Projectile collision with background tiles
		for(int j = TILE_X; j <= ENDPOINT_X; j++) // X coordinate
		{
			for(int k = TILE_Y; k <= ENDPOINT_Y; k++) // Y coordinate
			{
				// Hit tiles that are collidable only
				if(bgTiles[j][k].collidable)
				{ 
					bool hitTiles = collisionDetection(enemyProj[h][i].x, enemyProj[h][i].y, enemyProjectileSize[0]/2, enemyProjectileSize[1]/2, bgTiles[j][k].x, bgTiles[j][k].y, bgTiles[j][k].w, bgTiles[j][k].h);

					// If projectile hits tiles (except water), destroy projectile
					if(hitTiles && bgTiles[j][k].tileType != 1)
					{
						enemyProj[h][i].isActive = false;
					}
				}
			}
		}

		
		// If projectile goes outside the level
		if(enemyProj[h][i].isActive == true && (enemyProj[h][i].x > LEVEL_WIDTH || enemyProj[h][i].x < -20 || enemyProj[h][i].y > LEVEL_HEIGHT || enemyProj[h][i].y < -20))
		{
			// Destroy projectile
			enemyProj[h][i].isActive = false;
		}

		/*
		// Destroy projectile when off screen
		for(int j = 0; j < enemyCount; j++)
		{
			if(collisionWithCamera[j] == true)
			{
				//enemyProj[j][i].isActive = false;
			}
		}*/
	}
}

void getCameraInput()
{
	if (kbState[SDL_SCANCODE_W])
	{
		cam.y -= 30;
	}

	if (kbState[SDL_SCANCODE_S])
	{
		cam.y += 30;
	}

	if (kbState[SDL_SCANCODE_A])
	{
		cam.x -= 30;
	}

	if (kbState[SDL_SCANCODE_D])
	{
		cam.x += 30;
	}
}
void setCamera()
{
	cam.x = player.x - SCREEN_WIDTH/2;
	cam.y = player.y - SCREEN_HEIGHT/2;
	getCameraInput();

	// Check camera bounds
	if( cam.x < 0 )
	{ 
		cam.x = 0;
	}
	if( cam.y < 0 )
	{
		cam.y = 0;
	}
	if( cam.x > LEVEL_WIDTH - SCREEN_WIDTH )
	{
		cam.x = LEVEL_WIDTH - SCREEN_WIDTH;
	}
	if( cam.y > LEVEL_HEIGHT - SCREEN_HEIGHT )
	{
		cam.y = LEVEL_HEIGHT - SCREEN_HEIGHT;
	}
		
	// Set camera optimization
	TILE_X = floor(static_cast<double>(cam.x/TILE_WIDTH));
	TILE_Y = floor(static_cast<double>(cam.y/TILE_HEIGHT));
	ENDPOINT_X = (cam.x + SCREEN_WIDTH)/TILE_WIDTH;
	ENDPOINT_Y = (cam.y + SCREEN_HEIGHT)/TILE_HEIGHT;
}

/* SET ANIMATION */
void setAnimationDef()
{
	for(int i = 0; i < arraySize; i++)
	{
		animDef.frames[i].frameTimeSecs = 100;
	}

	// Down animation
	animDef.frames[0].image = glTexImageTGAFile("Texture/Player Sprite/Elazul/elazulDown1.tga", &spriteSize[0], &spriteSize[1]);
	animDef.frames[1].image = glTexImageTGAFile("Texture/Player Sprite/Elazul/elazulDown2.tga", &spriteSize[0], &spriteSize[1]);
	animDef.frames[2].image = glTexImageTGAFile("Texture/Player Sprite/Elazul/elazulDown3.tga", &spriteSize[0], &spriteSize[1]);
	animDef.frames[3].image = glTexImageTGAFile("Texture/Player Sprite/Elazul/elazulDown4.tga", &spriteSize[0], &spriteSize[1]);
	animDef.frames[4].image = glTexImageTGAFile("Texture/Player Sprite/Elazul/elazulDown5.tga", &spriteSize[0], &spriteSize[1]);
	animDef.frames[5].image = glTexImageTGAFile("Texture/Player Sprite/Elazul/elazulDown6.tga", &spriteSize[0], &spriteSize[1]);

	// Up animation
	animDef.frames[6].image = glTexImageTGAFile("Texture/Player Sprite/Elazul/elazulUp1.tga", &spriteSize[0], &spriteSize[1]);
	animDef.frames[7].image = glTexImageTGAFile("Texture/Player Sprite/Elazul/elazulUp2.tga", &spriteSize[0], &spriteSize[1]);
	animDef.frames[8].image = glTexImageTGAFile("Texture/Player Sprite/Elazul/elazulUp3.tga", &spriteSize[0], &spriteSize[1]);
	animDef.frames[9].image = glTexImageTGAFile("Texture/Player Sprite/Elazul/elazulUp4.tga", &spriteSize[0], &spriteSize[1]);
	animDef.frames[10].image = glTexImageTGAFile("Texture/Player Sprite/Elazul/elazulUp5.tga", &spriteSize[0], &spriteSize[1]);
	animDef.frames[11].image = glTexImageTGAFile("Texture/Player Sprite/Elazul/elazulUp6.tga", &spriteSize[0], &spriteSize[1]);

	// Left animation
	animDef.frames[12].image = glTexImageTGAFile("Texture/Player Sprite/Elazul/elazulLeft1.tga", &spriteSize[0], &spriteSize[1]);
	animDef.frames[13].image = glTexImageTGAFile("Texture/Player Sprite/Elazul/elazulLeft2.tga", &spriteSize[0], &spriteSize[1]);
	animDef.frames[14].image = glTexImageTGAFile("Texture/Player Sprite/Elazul/elazulLeft3.tga", &spriteSize[0], &spriteSize[1]);
	animDef.frames[15].image = glTexImageTGAFile("Texture/Player Sprite/Elazul/elazulLeft4.tga", &spriteSize[0], &spriteSize[1]);
	animDef.frames[16].image = glTexImageTGAFile("Texture/Player Sprite/Elazul/elazulLeft5.tga", &spriteSize[0], &spriteSize[1]);
	animDef.frames[17].image = glTexImageTGAFile("Texture/Player Sprite/Elazul/elazulLeft6.tga", &spriteSize[0], &spriteSize[1]);

	// Right animation
	animDef.frames[18].image = glTexImageTGAFile("Texture/Player Sprite/Elazul/elazulRight1.tga", &spriteSize[0], &spriteSize[1]);
	animDef.frames[19].image = glTexImageTGAFile("Texture/Player Sprite/Elazul/elazulRight2.tga", &spriteSize[0], &spriteSize[1]);
	animDef.frames[20].image = glTexImageTGAFile("Texture/Player Sprite/Elazul/elazulRight3.tga", &spriteSize[0], &spriteSize[1]);
	animDef.frames[21].image = glTexImageTGAFile("Texture/Player Sprite/Elazul/elazulRight4.tga", &spriteSize[0], &spriteSize[1]);
	animDef.frames[22].image = glTexImageTGAFile("Texture/Player Sprite/Elazul/elazulRight5.tga", &spriteSize[0], &spriteSize[1]);
	animDef.frames[23].image = glTexImageTGAFile("Texture/Player Sprite/Elazul/elazulRight6.tga", &spriteSize[0], &spriteSize[1]);

	// For attacking
	animDef.frames[24].image = glTexImageTGAFile("Texture/Player Sprite/Elazul/Attack/elazulAttackLeft2.tga", &spriteSize[0], &spriteSize[1]);
	animDef.frames[25].image = glTexImageTGAFile("Texture/Player Sprite/Elazul/Attack/elazulAttackRight2.tga", &spriteSize[0], &spriteSize[1]);
	animDef.frames[26].image = glTexImageTGAFile("Texture/Player Sprite/Elazul/Attack/elazulAttackUp2.tga", &spriteSize[0], &spriteSize[1]);
	animDef.frames[27].image = glTexImageTGAFile("Texture/Player Sprite/Elazul/Attack/elazulAttackDown2.tga", &spriteSize[0], &spriteSize[1]);

	// Standby sprites
	animDef.frames[28].image = glTexImageTGAFile("Texture/Player Sprite/Elazul/elazulLeftStandby.tga", &spriteSize[0], &spriteSize[1]);
	animDef.frames[29].image = glTexImageTGAFile("Texture/Player Sprite/Elazul/elazulRightStandby.tga", &spriteSize[0], &spriteSize[1]);
	animDef.frames[30].image = glTexImageTGAFile("Texture/Player Sprite/Elazul/elazulTop.tga", &spriteSize[0], &spriteSize[1]);
	animDef.frames[31].image = glTexImageTGAFile("Texture/Player Sprite/Elazul/elazulStandby.tga", &spriteSize[0], &spriteSize[1]);
}
void setEnemyAnimationDef()
{
	for(int i = 0; i < enArraySize; i++)
	{
		enAnimDef.frames[i].frameTimeSecs = 100;
	}

	// Left animation
	enAnimDef.frames[0].image = glTexImageTGAFile("Texture/Monster Sprites/poring1.tga", &enemySize[0], &enemySize[1]);
	enAnimDef.frames[1].image = glTexImageTGAFile("Texture/Monster Sprites/poring2.tga", &enemySize[0], &enemySize[1]);
	enAnimDef.frames[2].image = glTexImageTGAFile("Texture/Monster Sprites/poring3.tga", &enemySize[0], &enemySize[1]);
	enAnimDef.frames[3].image = glTexImageTGAFile("Texture/Monster Sprites/poring4.tga", &enemySize[0], &enemySize[1]);

	enAnimDef.frames[12].image = glTexImageTGAFile("Texture/Monster Sprites/pouring1.tga", &enemySize[0], &enemySize[1]);
	enAnimDef.frames[13].image = glTexImageTGAFile("Texture/Monster Sprites/pouring2.tga", &enemySize[0], &enemySize[1]);
	enAnimDef.frames[14].image = glTexImageTGAFile("Texture/Monster Sprites/pouring3.tga", &enemySize[0], &enemySize[1]);
	enAnimDef.frames[15].image = glTexImageTGAFile("Texture/Monster Sprites/pouring4.tga", &enemySize[0], &enemySize[1]);

	// Right animation
	enAnimDef.frames[4].image = glTexImageTGAFile("Texture/Monster Sprites/poring5.tga", &enemySize[0], &enemySize[1]);
	enAnimDef.frames[5].image = glTexImageTGAFile("Texture/Monster Sprites/poring6.tga", &enemySize[0], &enemySize[1]);
	enAnimDef.frames[6].image = glTexImageTGAFile("Texture/Monster Sprites/poring7.tga", &enemySize[0], &enemySize[1]);
	enAnimDef.frames[7].image = glTexImageTGAFile("Texture/Monster Sprites/poring8.tga", &enemySize[0], &enemySize[1]);

	enAnimDef.frames[16].image = glTexImageTGAFile("Texture/Monster Sprites/pouring5.tga", &enemySize[0], &enemySize[1]);
	enAnimDef.frames[17].image = glTexImageTGAFile("Texture/Monster Sprites/pouring6.tga", &enemySize[0], &enemySize[1]);
	enAnimDef.frames[18].image = glTexImageTGAFile("Texture/Monster Sprites/pouring7.tga", &enemySize[0], &enemySize[1]);
	enAnimDef.frames[19].image = glTexImageTGAFile("Texture/Monster Sprites/pouring8.tga", &enemySize[0], &enemySize[1]);

	// Death animation
	int deathSize[2] = {88, 72};
	enAnimDef.frames[8].image = glTexImageTGAFile("Texture/Monster Sprites/death1.tga", &deathSize[0], &deathSize[1]);
	enAnimDef.frames[9].image = glTexImageTGAFile("Texture/Monster Sprites/death2.tga", &deathSize[0], &deathSize[1]);
	enAnimDef.frames[10].image = glTexImageTGAFile("Texture/Monster Sprites/death3.tga", &deathSize[0], &deathSize[1]);
	enAnimDef.frames[11].image = glTexImageTGAFile("Texture/Monster Sprites/death4.tga", &deathSize[0], &deathSize[1]);

	int bSize[2] = {300, 300};
	// Boss animation
	enAnimDef.frames[20].image = glTexImageTGAFile("Texture/Monster Sprites/king1.tga", &bossSize[0], &bossSize[1]);
	enAnimDef.frames[21].image = glTexImageTGAFile("Texture/Monster Sprites/king2.tga", &bossSize[0], &bossSize[1]);
	enAnimDef.frames[22].image = glTexImageTGAFile("Texture/Monster Sprites/king3.tga", &bossSize[0], &bossSize[1]);
	enAnimDef.frames[23].image = glTexImageTGAFile("Texture/Monster Sprites/king4.tga", &bossSize[0], &bossSize[1]);
	enAnimDef.frames[24].image = glTexImageTGAFile("Texture/Monster Sprites/king5.tga", &bossSize[0], &bossSize[1]);
	enAnimDef.frames[25].image = glTexImageTGAFile("Texture/Monster Sprites/king6.tga", &bossSize[0], &bossSize[1]);
	enAnimDef.frames[26].image = glTexImageTGAFile("Texture/Monster Sprites/king7.tga", &bossSize[0], &bossSize[1]);
	enAnimDef.frames[27].image = glTexImageTGAFile("Texture/Monster Sprites/king8.tga", &bossSize[0], &bossSize[1]);
	enAnimDef.frames[28].image = glTexImageTGAFile("Texture/Monster Sprites/king9.tga", &bossSize[0], &bossSize[1]);
	enAnimDef.frames[29].image = glTexImageTGAFile("Texture/Monster Sprites/king10.tga", &bossSize[0], &bossSize[1]);
	enAnimDef.frames[30].image = glTexImageTGAFile("Texture/Monster Sprites/king11.tga", &bossSize[0], &bossSize[1]);
	enAnimDef.frames[31].image = glTexImageTGAFile("Texture/Monster Sprites/king12.tga", &bossSize[0], &bossSize[1]);
	enAnimDef.frames[32].image = glTexImageTGAFile("Texture/Monster Sprites/king13.tga", &bossSize[0], &bossSize[1]);
	enAnimDef.frames[33].image = glTexImageTGAFile("Texture/Monster Sprites/king14.tga", &bossSize[0], &bossSize[1]);
	enAnimDef.frames[34].image = glTexImageTGAFile("Texture/Monster Sprites/king15.tga", &bossSize[0], &bossSize[1]);
	enAnimDef.frames[35].image = glTexImageTGAFile("Texture/Monster Sprites/king16.tga", &bossSize[0], &bossSize[1]);

}

/* UPDATE ANIMATION OF PLAYER SPRITE */
void updateAnimation()
{
	if(player.isAttacking == true && player.onStandby == true)
	{
		if(lastKeyPressed == "left")
		{
			player.curAnimation.curFrame = animDef.frames[24].image;
			spriteTex = player.curAnimation.curFrame;
			playerProjectile = plyrProjectile[0];
		}
		else if(lastKeyPressed == "right")
		{
			player.curAnimation.curFrame = animDef.frames[25].image;
			spriteTex = player.curAnimation.curFrame;
			playerProjectile = plyrProjectile[1];
		}
		else if(lastKeyPressed == "up")
		{
			player.curAnimation.curFrame = animDef.frames[26].image;
			spriteTex = player.curAnimation.curFrame;
			playerProjectile = plyrProjectile[2];
		}
		else if(lastKeyPressed == "down")
		{
			player.curAnimation.curFrame = animDef.frames[2].image;
			spriteTex = player.curAnimation.curFrame;
			playerProjectile = plyrProjectile[3];
		}
	}
	else if(player.isAttacking == true && player.onStandby == false)
	{
		if(lastKeyPressed == "left")
		{
			playerProjectile = plyrProjectile[0];
		}
		else if(lastKeyPressed == "right")
		{
			playerProjectile = plyrProjectile[1];
		}
		else if(lastKeyPressed == "up")
		{
			playerProjectile = plyrProjectile[2];
		}
		else if(lastKeyPressed == "down")
		{
			playerProjectile = plyrProjectile[3];
		}
	}
	else
	{
		if(player.isWalkingUp)
		{
			player.curAnimation.curFrame = animDef.frames[animationCounter2].image; // Set current frame image 
			spriteTex = player.curAnimation.curFrame; // Set the sprite texture
			dTime = (animDef.frames[animationCounter2].frameTimeSecs - animation.secsUntilNextFrame); // Set delta time for each frame

			// If counter reaches a specific image array length, set counter back to 6 and repeat animation
			if(animationCounter2 >= 11)
			{
				animationCounter2 = 6;
			}
			else if(dTime <= 0 && animationCounter < 11)
			{
				animationCounter2++;
				animation.secsUntilNextFrame = 0; 
			}
		}else if(player.isWalkingDown)
		{
			player.curAnimation.curFrame = animDef.frames[animationCounter].image; // Set current frame image 
			spriteTex = player.curAnimation.curFrame; // Set the sprite texture
			dTime = (animDef.frames[animationCounter].frameTimeSecs - animation.secsUntilNextFrame); // Set delta time for each frame

			// If counter reaches a specific image array length, set counter back to 0 and repeat animation
			if(animationCounter >= 5)
			{
				animationCounter = 0;
			}
			else if(dTime <= 0 && animationCounter < 5)
			{
				animationCounter++;
				animation.secsUntilNextFrame = 0; 
			}
		}else if(player.isWalkingLeft)
		{
			player.curAnimation.curFrame = animDef.frames[animationCounter3].image; // Set current frame image 
			spriteTex = player.curAnimation.curFrame; // Set the sprite texture
			dTime = (animDef.frames[animationCounter3].frameTimeSecs - animation.secsUntilNextFrame); // Set delta time for each frame

			// If counter reaches a specific image array length, set counter back to 12 and repeat animation
			if(animationCounter3 >= 17)
			{
				animationCounter3 = 12;
			}
			else if(dTime <= 0 && animationCounter < 17)
			{
				animationCounter3++;
				animation.secsUntilNextFrame = 0; 
			}
		}else if(player.isWalkingRight)
		{
			player.curAnimation.curFrame = animDef.frames[animationCounter4].image; // Set current frame image 
			spriteTex = player.curAnimation.curFrame; // Set the sprite texture
			dTime = (animDef.frames[animationCounter4].frameTimeSecs - animation.secsUntilNextFrame); // Set delta time for each frame

			// If counter reaches a specific image array length, set counter back to 18 and repeat animation
			if(animationCounter4 >= 23)
			{
				animationCounter4 = 18;
			}
			else if(dTime <= 0 && animationCounter < 23)
			{
				animationCounter4++;
				animation.secsUntilNextFrame = 0; 
			}
		}
		else if(player.isAttacking == false)// Set back to default sprite
		{
			if(lastKeyPressed == "left")
			{
				player.curAnimation.curFrame = animDef.frames[28].image; // Set current frame image 
				spriteTex = player.curAnimation.curFrame; // Set the sprite texture
			}
			else if(lastKeyPressed == "right")
			{
				player.curAnimation.curFrame = animDef.frames[29].image; // Set current frame image 
				spriteTex = player.curAnimation.curFrame; // Set the sprite texture
			}
			else if(lastKeyPressed == "up")
			{
				player.curAnimation.curFrame = animDef.frames[30].image; // Set current frame image 
				spriteTex = player.curAnimation.curFrame; // Set the sprite texture
			}
			else
			{
				player.curAnimation.curFrame = animDef.frames[31].image; // Set current frame image 
				spriteTex = player.curAnimation.curFrame; // Set the sprite texture
			}
			animationCounter = 0;
			dTime = 0;
		}
	}
}

/* UPDATE ANIMATION OF ENEMY SPRITE */
void updateEnemyAnimation()
{
	for(int i = 0; i < enemyCount; i++)
	{
		if(enemies[i].health > 0)
		{
			if(enemies[i].movingRight == true)
			{
				if(i <= 20) // Poring sprite animation
				{
					enemies[i].curAnimation.curFrame = enAnimDef.frames[enAnimationCounter2].image; // Set current frame image 
					enemySpriteTex[i] = enemies[i].curAnimation.curFrame; // Set the sprite texture
					enDeltaTime[i] = (enAnimDef.frames[enAnimationCounter2].frameTimeSecs - enAnimation.secsUntilNextFrame); // Set delta time for each frame

					// If counter reaches a specific image array length, set counter back to 0 and repeat animation
					if(enAnimationCounter2 >= 7)
					{
						enAnimationCounter2 = 4;
					}
					else if(enDeltaTime[i] <= 0 && enAnimationCounter2 < 7)
					{
						enAnimationCounter2++;
						enAnimation.secsUntilNextFrame = 0; 
					}
				}
				
				if(i >= 21 && i < 40) // Pouring sprite animation
				{
					enemies[i].curAnimation.curFrame = enAnimDef.frames[enAnimationCounter4].image; // Set current frame image 
					enemySpriteTex[i] = enemies[i].curAnimation.curFrame; // Set the sprite texture
					enDeltaTime[i] = (enAnimDef.frames[enAnimationCounter4].frameTimeSecs - enAnimation2.secsUntilNextFrame); // Set delta time for each frame
					
					// If counter reaches a specific image array length, set counter back to 0 and repeat animation
					if(enAnimationCounter4 >= 19)
					{
						enAnimationCounter4 = 16;
					}
					else if(enDeltaTime[i] <= 0 && enAnimationCounter4 < 19)
					{
						enAnimationCounter4++;
						enAnimation2.secsUntilNextFrame = 0; 
					}
				}

				if(i == 40)
				{
					enemies[i].curAnimation.curFrame = enAnimDef.frames[bossCounter2].image; // Set current frame image 
					enemySpriteTex[i] = enemies[i].curAnimation.curFrame; // Set the sprite texture
					enDeltaTime[i] = (enAnimDef.frames[bossCounter2].frameTimeSecs - bossAnimation.secsUntilNextFrame); // Set delta time for each frame
					enemies[i].projectile = kingProjectiles[1];

					// If counter reaches a specific image array length, set counter back to 0 and repeat animation
					if(bossCounter2 >= 35)
					{
						bossCounter2 = 28;
					}
					else if(enDeltaTime[i] <= 0 && bossCounter2 < 35)
					{
						bossCounter2++;
						bossAnimation.secsUntilNextFrame = 0; 
					}
				}
			}
			else // Moving left
			{
				if(i <= 20) // Poring sprite animation
				{
					enemies[i].curAnimation.curFrame = enAnimDef.frames[enAnimationCounter].image; // Set current frame image 
					enemySpriteTex[i] = enemies[i].curAnimation.curFrame; // Set the sprite texture
					enDeltaTime[i] = (enAnimDef.frames[enAnimationCounter].frameTimeSecs - enAnimation.secsUntilNextFrame); // Set delta time for each frame

					// If counter reaches a specific image array length, set counter back to 0 and repeat animation
					if(enAnimationCounter >= 3)
					{
						enAnimationCounter = 0;
					}
					else if(enDeltaTime[i] <= 0 && enAnimationCounter < 3)
					{
						enAnimationCounter++;
						enAnimation.secsUntilNextFrame = 0; 
					}
				}
				
				if(i >= 21 && i < 40)// Pouring sprite animation
				{
					enemies[i].curAnimation.curFrame = enAnimDef.frames[enAnimationCounter3].image; // Set current frame image 
					enemySpriteTex[i] = enemies[i].curAnimation.curFrame; // Set the sprite texture
					enDeltaTime[i] = (enAnimDef.frames[enAnimationCounter3].frameTimeSecs - enAnimation2.secsUntilNextFrame); // Set delta time for each frame

					// If counter reaches a specific image array length, set counter back to 0 and repeat animation
					if(enAnimationCounter3 >= 15)
					{
						enAnimationCounter3 = 12;
					}
					else if(enDeltaTime[i] <= 0 && enAnimationCounter3 < 15)
					{
						enAnimationCounter3++;
						enAnimation2.secsUntilNextFrame = 0; 
					}
				}

				if(i == 40)
				{
					enemies[i].curAnimation.curFrame = enAnimDef.frames[bossCounter1].image; // Set current frame image 
					enemySpriteTex[i] = enemies[i].curAnimation.curFrame; // Set the sprite texture
					enDeltaTime[i] = (enAnimDef.frames[bossCounter1].frameTimeSecs - bossAnimation.secsUntilNextFrame); // Set delta time for each frame
					enemies[i].projectile = kingProjectiles[0];

					// If counter reaches a specific image array length, set counter back to 0 and repeat animation
					if(bossCounter1 >= 27)
					{
						bossCounter1 = 20;
					}
					else if(enDeltaTime[i] <= 0 && bossCounter1 < 27)
					{
						bossCounter1++;
						bossAnimation.secsUntilNextFrame = 0; 
					}
				}
			}
		}
		else
		{
			if(enemies[i].deathTimer >= 0)
			{
				enemies[i].curAnimation.curFrame = enAnimDef.frames[enDeathCounter[i]].image; // Set current frame image 
				enemySpriteTex[i] = enemies[i].curAnimation.curFrame; // Set the sprite texture
				enDeltaTime[i] = (enAnimDef.frames[enDeathCounter[i]].frameTimeSecs - enAnimation0.secsUntilNextFrame); // Set delta time for each frame
				if(enDeltaTime[i] <= 0 && enDeathCounter[i] < 12)
				{
					enDeathCounter[i]++;
					enAnimation0.secsUntilNextFrame = 0; 
				}

				enemies[i].deathTimer--;
			}
		}
		
	}
}

void drawTiles()
{
	for(int i = TILE_X; i <= ENDPOINT_X; i++) // X coordinate
	{
		for(int j = TILE_Y; j <= ENDPOINT_Y; j++) // Y coordinate
		{
			glDrawSprite(bgTiles[i][j].image, bgTiles[i][j].x, bgTiles[i][j].y, bgTiles[i][j].w, bgTiles[i][j].h);
		}
	}
}
void drawSprites()
{
	bool cameraOnBigTree;
	bool cameraOnBigTreePlatform;
	bool cameraOnTeleporter[2];
	cameraOnBigTree = collisionDetection(cam.x, cam.y, cam.w, cam.h, LEVEL_WIDTH/2, 0, bigTreeSize[0], bigTreeSize[1]);
	cameraOnBigTreePlatform = collisionDetection(cam.x, cam.y, cam.w, cam.h, LEVEL_WIDTH/2, 0, bigTreePlatformSize[0], bigTreePlatformSize[1]);
	
	// Check if teleporter is visible
	for(int i = 0; i < 2; i++)
	{
		cameraOnTeleporter[i] = collisionDetection(cam.x, cam.y, cam.w, cam.h, teleporters[i].x, teleporters[i].y, teleporters[i].w, teleporters[i].h);	
		if(cameraOnTeleporter[i])
		{
			glDrawSprite(teleporters[i].sprite, teleporters[i].x, teleporters[i].y, teleporterSize[0], teleporterSize[1]);
		}
	}

	// Check if each individual enemy is within the screen
	for(int i = 0; i < enemyCount; i++)
	{
		// Draw enemy sprite only when it's within camera view
		if(i == 40)
		{
			collisionWithCamera[i] = collisionDetection(cam.x, cam.y, cam.w, cam.h, enemies[i].x, enemies[i].y, bossSize[0], bossSize[1]);
		}
		else
		{
			collisionWithCamera[i] = collisionDetection(cam.x, cam.y, cam.w, cam.h, enemies[i].x, enemies[i].y, enemySize[0], enemySize[1]);
		}
	}
	
	if(cameraOnBigTree == true || cameraOnBigTreePlatform == true)
	{
		// Draw player first if he's infront of the tree
		if(player.y >= bigTreeSize[1]/2)
		{
			glDrawSprite(bigTree, (LEVEL_WIDTH/2)+5, 0, bigTreeSize[0], bigTreeSize[1]);
			glDrawSprite(bigTreePlatform, (LEVEL_WIDTH/2)+5, 0, bigTreePlatformSize[0], bigTreePlatformSize[1]);

			// For every enemy, draw the sprite
			for(int i = 0; i < enemyCount; i++)
			{
				if(collisionWithCamera[i] == true)
				{
					if(enDeathCounter[i] >= 12)
					{
						enemySpriteTex[i] = enAnimDef.frames[11].image;
					}
					if(enemies[i].deathTimer >= 0)
					{
						if(i == 40)
						{
							glDrawSprite(enemySpriteTex[i], enemies[i].x, enemies[i].y, bossSize[0], bossSize[1]);
						}
						else
						{
							glDrawSprite(enemySpriteTex[i], enemies[i].x, enemies[i].y, enemySize[0], enemySize[1]);
						}
					}
				}
			}
			
			glDrawSprite(spriteTex, player.x, player.y, spriteSize[0], spriteSize[1]);
		}
		else
		{
			// For every enemy, draw the sprite
			for(int i = 0; i < enemyCount; i++)
			{
				if(collisionWithCamera[i] == true)
				{
					if(enDeathCounter[i] >= 12)
					{
						enemySpriteTex[i] = enAnimDef.frames[11].image;
					}
					if(enemies[i].deathTimer >= 0)
					{
						if(i == 40)
						{
							glDrawSprite(enemySpriteTex[i], enemies[i].x, enemies[i].y, bossSize[0], bossSize[1]);
						}
						else
						{
							glDrawSprite(enemySpriteTex[i], enemies[i].x, enemies[i].y, enemySize[0], enemySize[1]);
						}
					}
				}
			}

			glDrawSprite(spriteTex, player.x, player.y, spriteSize[0], spriteSize[1]);
			glDrawSprite(bigTree, (LEVEL_WIDTH/2)+5, 0, bigTreeSize[0], bigTreeSize[1]);
			glDrawSprite(bigTreePlatform, (LEVEL_WIDTH/2)+5, 0, bigTreePlatformSize[0], bigTreePlatformSize[1]);
		}
	}
	else
	{
		// For every enemy, draw the sprite
		for(int i = 0; i < enemyCount; i++)
		{
			if(collisionWithCamera[i] == true)
			{
				if(enDeathCounter[i] >= 12)
				{
					enemySpriteTex[i] = enAnimDef.frames[11].image;
				}
				if(enemies[i].deathTimer >= 0)
				{
					if(i == 40)
					{
						glDrawSprite(enemySpriteTex[i], enemies[i].x, enemies[i].y, bossSize[0], bossSize[1]);
					}
					else
					{
						glDrawSprite(enemySpriteTex[i], enemies[i].x, enemies[i].y, enemySize[0], enemySize[1]);
					}
				}
			}
		}

		glDrawSprite(spriteTex, player.x, player.y, spriteSize[0], spriteSize[1]);
	}


}
void drawProjectiles()
{
	for(int j = 0; j < 100; j++)
	{
		if(playerProj[j].isActive)
		{
			glDrawSprite(playerProjectile, playerProj[j].x, playerProj[j].y, projectileSize[0], projectileSize[1]);
		}
	}

	for(int h = 0; h < enemyCount; h++)
	{
		for(int i = 0; i < enemyTotalProjectile; i++)
		{
			if(enemyProj[h][i].isActive)
			{
				if(i == 40)
				{
					glDrawSprite(enemies[h].projectile, enemyProj[h][i].x, enemyProj[h][i].y, kingProjectileSize[0], kingProjectileSize[1]);
				}
				else
				{
					glDrawSprite(enemies[h].projectile, enemyProj[h][i].x, enemyProj[h][i].y, enemyProjectileSize[0], enemyProjectileSize[1]);
				}
			}
		}
	}
}
void drawPlayerHealth()
{
	// Draw player health
	for(int i = 0; i < player.hp; i++)
	{
		glDrawSprite(playerHealth, cam.x+(i*heartSize[0]), cam.y+10, heartSize[0], heartSize[1]);
	}
}

void backgroundCollisionDetection(int deltaTime)
{
	bool enemiesCollided[enemyCount];
	for(int i = TILE_X; i <= ENDPOINT_X; i++) // X coordinate
	{
		for(int j = TILE_Y; j <= ENDPOINT_Y; j++) // Y coordinate
		{
			if(bgTiles[i][j].collidable)
			{ 
				bool collided = collisionDetection(player.x, player.y, player.w, player.h, bgTiles[i][j].x, bgTiles[i][j].y, bgTiles[i][j].w, bgTiles[i][j].h/8);

				// If it has collided with a wall
				if(collided) 
				{
					float distanceX;
					float distanceY;

					// Distance between tile and player
					distanceX = bgTiles[i][j].x - player.x;
					distanceY = bgTiles[i][j].y - player.y;

					if(player.isWalkingLeft && distanceX < 0)
					{
						player.x += speed * deltaTime;
					}
					else if(player.isWalkingRight && distanceX > 0)
					{
						player.x -= speed * deltaTime;
					}
					else if(player.isWalkingUp)
					{
						player.y += speed * deltaTime;
					}
					else if(player.isWalkingDown)
					{
						player.y -= speed * deltaTime;
					}
				}

				for(int l = 0; l < enemyCount; l++)
				{
					enemiesCollided[l] = collisionDetection(enemies[l].x, enemies[l].y, enemies[l].w, enemies[l].h, bgTiles[i][j].x, bgTiles[i][j].y, bgTiles[i][j].w, bgTiles[i][j].h/8);

					// Enemy tile collision
					if(enemiesCollided[l])
					{
						// Move each enemy accordingly based on their location
						
						float distanceX[enemyCount];
						float distanceY[enemyCount];

						// Distance between tile and enemy
						distanceX[l] = bgTiles[i][j].x - enemies[l].x;
						distanceY[l] = bgTiles[i][j].y - enemies[l].y;

						if(enemies[l].movingLeft && distanceX[l] < 0)
						{
							enemies[l].x += enemies[l].speed * deltaTime;
						}
						else if(enemies[l].movingRight && distanceX[l] > 0)
						{
							enemies[l].x -= enemies[l].speed * deltaTime;
						}
						else if(enemies[l].movingUp)
						{
							enemies[l].y += enemies[l].speed * deltaTime;
						}
						else if(enemies[l].movingDown)
						{
							enemies[l].y -= enemies[l].speed * deltaTime;
						}
					}
				}
			} // End if
		} // End inner FOR
	} // End outer FOR
}
void objectCollisionDetection()
{
	/* WILL ADD MORE OBJECTS */
	bool teleportingForward = collisionDetection(player.x, player.y, player.w, player.h, teleporters[0].x, teleporters[0].y, teleporters[0].w/2, teleporters[0].h/2);
	bool teleportingBack = collisionDetection(player.x, player.y, player.w, player.h, teleporters[1].x, teleporters[1].y, teleporters[1].w/2, teleporters[1].h/2);
	bool hitByBoss = collisionDetection(player.x, player.y, player.w, player.h, enemies[40].x, enemies[40].y, enemies[40].w, enemies[40].h);

	// Teleport player
	if(teleportingForward)
	{
		player.x = LEVEL_WIDTH/2;
		player.y = 2375;
	}
	
	if(teleportingBack)
	{
		player.x = LEVEL_WIDTH/2;
		player.y = 1850;
	}

	if(hitByBoss)
	{
		player.hp -= 3;
	}

}
bool collisionDetection(int playX, int playY, int playWidth, int playHeight, int objX, int objY, int objWidth, int objHeight)
{	
	if(playY + playHeight <= objY)
	{
		return false;
	}

	if(playY >= objY + objHeight)
	{
		return false;
	}

	if(playX + playWidth <= objX)
	{
		return false;
	}

	if(playX >= objX + objWidth)
	{
		return false;
	}

	return true;
}

float randomGenerator(float MAX, float MIN)
{
	//float random = static_cast <float> (rand()) / (static_cast <float> (RAND_MAX/ (MAX + MIN)));
	float random = MIN + static_cast <float> (rand()) / (static_cast <float> (RAND_MAX/ (MAX - MIN)));

	return random;
}
